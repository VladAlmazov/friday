{"version":3,"sources":["common/SuperInputText/SuperInputText.module.css","common/SuperButton/SuperButton.module.css","common/SuperCheckbox/SuperCheckbox.module.css","common/SuperRadio/SuperRadio.module.css","common/SuperSelect/SuperSelect.module.css","common/SuperEditableSpan/SuperEditableSpan.module.css","component/Login.tsx","component/Registration.tsx","component/Profile.tsx","component/PasswordRecovery.tsx","component/NewPassword.tsx","common/SuperButton/SuperButton.tsx","common/SuperInputText/SuperInputText.tsx","common/SuperEditableSpan/SuperEditableSpan.tsx","common/SuperCheckbox/SuperCheckbox.tsx","common/SuperRadio/SuperRadio.tsx","common/SuperSelect/SuperSelect.tsx","component/Testing.tsx","component/Error404.tsx","App.tsx","reportWebVitals.ts","bll/reducer.ts","bll/store.ts","index.tsx"],"names":["module","exports","Login","Registration","Profile","PasswordRecovery","NewPassword","SuperButton","red","className","restProps","finalClassName","s","button","default","SuperInputText","type","onChange","onChangeText","onKeyPress","onEnter","error","spanClassName","finalSpanClassName","finalInputClassName","input","errorInput","superInput","e","currentTarget","value","key","SuperEditableSpan","autoFocus","onBlur","spanProps","useState","editMode","setEditMode","children","onDoubleClick","restSpanProps","span","SuperCheckbox","onChangeChecked","checkbox","checked","SuperRadio","name","options","onChangeOption","onChangeCallback","finalRadioClassName","radio","mappedOptions","map","o","i","label","SuperSelect","option","finalSelectClassName","select","Testing","text","setText","setChecked","setValue","arr","selectValue","alert","undefined","Error404","PATH","App","path","exact","render","to","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initState","reducers","combineReducers","reducer","state","action","store","createStore","window","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9be95d29.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"SuperInputText_input__Wz-vZ\",\"superInput\":\"SuperInputText_superInput__3NWMN\",\"errorInput\":\"SuperInputText_errorInput__1IOFg\",\"error\":\"SuperInputText_error__3s8WN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"SuperButton_default__2WsY-\",\"red\":\"SuperButton_red__xmkJb\",\"button\":\"SuperButton_button__NIU4I\",\"blink\":\"SuperButton_blink__1yfu-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"SuperCheckbox_label__3bT0-\",\"checkbox\":\"SuperCheckbox_checkbox__QYZHD\",\"spanClassName\":\"SuperCheckbox_spanClassName__2ltMm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"radio\":\"SuperRadio_radio__dyzTE\",\"label\":\"SuperRadio_label__2x2rz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"select\":\"SuperSelect_select__udOsh\",\"option\":\"SuperSelect_option__2MlMX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"span\":\"SuperEditableSpan_span__1DJc5\"};","export const Login = () => {\r\n    return (\r\n        <div>\r\n            Login\r\n        </div>\r\n    )\r\n}","export const Registration = () => {\r\n    return (\r\n        <div>\r\n            Registration\r\n        </div>\r\n    )\r\n}","export const Profile = () => {\r\n    return (\r\n        <div>\r\n            Profile\r\n        </div>\r\n    )\r\n}","export const PasswordRecovery = () => {\r\n    return (\r\n        <div>\r\n            Password recovery\r\n        </div>\r\n    )\r\n}","export const NewPassword = () => {\r\n    return (\r\n        <div>\r\n            New password\r\n        </div>\r\n    )\r\n}","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react'\nimport s from './SuperButton.module.css'\n\n// тип пропсов обычной кнопки, children в котором храниться название кнопки там уже описан\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\n\ntype SuperButtonPropsType = DefaultButtonPropsType & {\n    red?: boolean\n}\n\nconst SuperButton: React.FC<SuperButtonPropsType> = (\n    {\n        red, className,\n        ...restProps// все остальные пропсы попадут в объект restProps, там же будет children\n    }\n) => {\n    const finalClassName = `${s.button} ${red ? s.red : s.default} ${className}`\n\n    return (\n        <button\n            className={finalClassName}\n            {...restProps} // отдаём кнопке остальные пропсы если они есть (children там внутри)\n        />\n    )\n}\n\nexport default SuperButton\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent} from 'react'\nimport s from './SuperInputText.module.css'\n\n// тип пропсов обычного инпута\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\n\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\ntype SuperInputTextPropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\n    onChangeText?: (value: string) => void\n    onEnter?: () => void\n    error?: string\n    spanClassName?: string\n}\n\nconst SuperInputText: React.FC<SuperInputTextPropsType> = (\n    {\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\n        onChange, onChangeText,\n        onKeyPress, onEnter,\n        error,\n        className, spanClassName,\n\n        ...restProps// все остальные пропсы попадут в объект restProps\n    }\n) => {\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\n        onChange // если есть пропс onChange\n        && onChange(e) // то передать ему е (поскольку onChange не обязателен)\n\n        onChangeText && onChangeText(e.currentTarget.value)\n    }\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\n        onKeyPress && onKeyPress(e);\n\n        onEnter // если есть пропс onEnter\n        && e.key === 'Enter' // и если нажата кнопка Enter\n        && onEnter() // то вызвать его\n    }\n\n    const finalSpanClassName = `${s.error} ${spanClassName ? spanClassName : ''}`\n    const finalInputClassName = `${s.input} ${error ? s.errorInput : s.superInput} ${className}`\n\n    return (\n        <>\n            <input\n                type={'text'}\n                onChange={onChangeCallback}\n                onKeyPress={onKeyPressCallback}\n                className={finalInputClassName}\n\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\n            />\n            {error && <span className={finalSpanClassName}>{error}</span>}\n        </>\n    )\n}\n\nexport default SuperInputText\n","import React, {DetailedHTMLProps, InputHTMLAttributes, HTMLAttributes, useState} from 'react'\nimport s from './SuperEditableSpan.module.css'\nimport SuperInputText from '../SuperInputText/SuperInputText';\n\n// тип пропсов обычного инпута\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\n// тип пропсов обычного спана\ntype DefaultSpanPropsType = DetailedHTMLProps<HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>\n\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\ntype SuperEditableSpanType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\n    onChangeText?: (value: string) => void\n    onEnter?: () => void\n    error?: string\n    spanClassName?: string\n\n    spanProps?: DefaultSpanPropsType // пропсы для спана\n}\n\nconst SuperEditableSpan: React.FC<SuperEditableSpanType> = (\n    {\n        autoFocus, // игнорировать изменение этого пропса\n        onBlur,\n        onEnter,\n        spanProps,\n\n        ...restProps// все остальные пропсы попадут в объект restProps\n    }\n) => {\n    const [editMode, setEditMode] = useState<boolean>(false)\n    const {children, onDoubleClick, className, ...restSpanProps} = spanProps || {}\n\n    const onEnterCallback = () => {\n        setEditMode(false) // выключить editMode при нажатии Enter\n\n        onEnter && onEnter()\n    }\n    const onBlurCallback = (e: React.FocusEvent<HTMLInputElement>) => {\n        setEditMode(false) // выключить editMode при нажатии за пределами инпута\n\n        onBlur && onBlur(e)\n    }\n    const onDoubleClickCallBack = (e: React.MouseEvent<HTMLSpanElement, MouseEvent>) => {\n        setEditMode(true) // включить editMode при двойном клике\n\n        onDoubleClick && onDoubleClick(e)\n    }\n\n    const spanClassName = `${s.span} ${className ? className : ''}`\n\n    return (\n        <>\n            {editMode\n                ? (\n                    <SuperInputText\n                        autoFocus // пропсу с булевым значением не обязательно указывать true\n                        onBlur={onBlurCallback}\n                        onEnter={onEnterCallback}\n\n                        {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\n                    />\n                ) : (\n                    <span\n                        onDoubleClick={onDoubleClickCallBack}\n                        className={spanClassName}\n\n                        {...restSpanProps}\n                    >\n                        {/*если нет захардкодженного текста для спана, то значение инпута*/}\n                        {children || restProps.value}\n                    </span>\n                )\n            }\n        </>\n    )\n}\n\nexport default SuperEditableSpan\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from 'react'\nimport s from './SuperCheckbox.module.css'\n\n// тип пропсов обычного инпута\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\n\ntype SuperCheckboxPropsType = DefaultInputPropsType & {\n    onChangeChecked?: (checked: boolean) => void\n    spanClassName?: string\n}\n\nconst SuperCheckbox: React.FC<SuperCheckboxPropsType> = (\n    {\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\n        onChange, onChangeChecked,\n        className, spanClassName,\n        children, // в эту переменную попадёт текст, типизировать не нужно так как он затипизирован в React.FC\n\n        ...restProps// все остальные пропсы попадут в объект restProps\n    }\n) => {\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\n        onChange && onChange(e)\n\n        onChangeChecked && onChangeChecked(e.currentTarget.checked)\n    }\n\n    const finalInputClassName = `${s.checkbox} ${className ? className : ''}`\n\n    return (\n        <label>\n            <input\n                type={'checkbox'}\n                onChange={onChangeCallback}\n                className={finalInputClassName}\n\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (checked например там внутри)\n            />\n            {children && <span className={s.spanClassName}>{children}</span>}\n        </label> // благодаря label нажатие на спан передастся в инпут\n    )\n}\n\nexport default SuperCheckbox\n","import React, {ChangeEvent, InputHTMLAttributes, DetailedHTMLProps} from 'react'\nimport s from './SuperRadio.module.css'\n\ntype DefaultRadioPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\n\ntype SuperRadioPropsType = DefaultRadioPropsType & {\n    options?: any[]\n    onChangeOption?: (option: any) => void\n}\n\nconst SuperRadio: React.FC<SuperRadioPropsType> = (\n    {\n        type, name, className,\n        options, value,\n        onChange, onChangeOption,\n        ...restProps\n    }\n) => {\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\n        onChange && onChange(e)\n        onChangeOption && onChangeOption(e.currentTarget.value)\n    }\n\n    const finalRadioClassName = s.radio\n\n    const mappedOptions: any[] = options ? options.map((o, i) => (\n        <label key={name + '-' + i} className={s.label}>\n            <input\n                type={'radio'}\n                className={finalRadioClassName}\n                name={name}\n                checked={o === value}\n                value={o}\n                onChange={onChangeCallback}\n                {...restProps}\n            />\n            {o}\n        </label>\n    )) : []\n\n    return (\n        <>\n            {mappedOptions}\n        </>\n    )\n}\n\nexport default SuperRadio\n","import React, {SelectHTMLAttributes, DetailedHTMLProps, ChangeEvent} from 'react'\nimport s from './SuperSelect.module.css'\n\ntype DefaultSelectPropsType = DetailedHTMLProps<SelectHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>\n\ntype SuperSelectPropsType = DefaultSelectPropsType & {\n    options?: any[]\n    onChangeOption?: (option: any) => void\n}\n\nconst SuperSelect: React.FC<SuperSelectPropsType> = (\n    {\n        options, className,\n        onChange, onChangeOption,\n        ...restProps\n    }\n) => {\n    const mappedOptions: any[] = options ? options.map((o, i) => (\n        <option className={s.option} key={o + '-' + i} value={o}>{o}</option>\n    )) : []\n\n    const onChangeCallback = (e: ChangeEvent<HTMLSelectElement>) => {\n        onChange && onChange(e)\n        onChangeOption && onChangeOption(e.currentTarget.value)\n    }\n\n    const finalSelectClassName = s.select + (\n        className\n        ? ' ' + className\n        : ''\n    )\n\n    return (\n        <select className={finalSelectClassName} onChange={onChangeCallback} {...restProps}>\n            {mappedOptions}\n        </select>\n    )\n}\n\nexport default SuperSelect\n","import SuperButton from '../common/SuperButton/SuperButton';\r\nimport SuperInputText from '../common/SuperInputText/SuperInputText';\r\nimport SuperEditableSpan from '../common/SuperEditableSpan/SuperEditableSpan';\r\nimport SuperCheckbox from '../common/SuperCheckbox/SuperCheckbox';\r\nimport SuperRadio from '../common/SuperRadio/SuperRadio';\r\nimport SuperSelect from '../common/SuperSelect/SuperSelect';\r\nimport {useState} from 'react';\r\n\r\nexport const Testing = () => {\r\n    const [text, setText] = useState<string>('')\r\n\r\n    const error = text ? '' : 'error'\r\n\r\n    const showAlert = () => {\r\n        if (error) {\r\n            alert('введите текст...')\r\n        } else {\r\n            alert(text) // если нет ошибки показать текст\r\n        }\r\n    }\r\n\r\n    const [checked, setChecked] = useState<boolean>(true)\r\n\r\n    const [value, setValue] = useState<string>('')\r\n\r\n    const arr = ['Apple', 'Samsung', 'Nokia']\r\n\r\n    const [selectValue, onChangeOption] = useState(arr[1])\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                Customise button example: <br/>\r\n                <SuperButton>\r\n                    Submit\r\n                </SuperButton>\r\n            </div>\r\n            <div>\r\n                Customise input example(enter your text and press Enter): <br/>\r\n                <SuperInputText\r\n                    value={text}\r\n                    onChangeText={setText}\r\n                    onEnter={showAlert}\r\n                    error={error}\r\n                />\r\n            </div>\r\n            <div>\r\n                Customise checkbox example: <br/>\r\n                <SuperCheckbox\r\n                    checked={checked}\r\n                    onChangeChecked={setChecked}\r\n                />\r\n            </div>\r\n            <div>\r\n                Customise span example(double click): <br/>\r\n                <SuperEditableSpan\r\n                    value={value}\r\n                    onChangeText={setValue}\r\n                    spanProps={{children: value ? undefined : 'enter text...'}}\r\n                />\r\n            </div>\r\n            <div>\r\n                Customise select example: <br/>\r\n                <SuperSelect\r\n                    options={arr}\r\n                    value={selectValue}\r\n                    onChangeOption={onChangeOption}\r\n                />\r\n            </div>\r\n            <div>\r\n                Customise radio example: <br/>\r\n                <SuperRadio\r\n                    name={'radio'}\r\n                    options={arr}\r\n                    value={selectValue}\r\n                    onChangeOption={onChangeOption}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react'\n\nfunction Error404() {\n    return (\n        <div>\n            <div>404</div>\n            <div>Page not found!</div>\n            <div>—ฅ/ᐠ.̫ .ᐟ\\ฅ—</div>\n        </div>\n    )\n}\n\nexport default Error404\n","import React from 'react';\nimport {Redirect, Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport {Login} from './component/Login';\nimport {Registration} from './component/Registration';\nimport {Profile} from './component/Profile';\nimport {PasswordRecovery} from './component/PasswordRecovery';\nimport {NewPassword} from './component/NewPassword';\nimport {Testing} from './component/Testing';\nimport Error404 from './component/Error404';\n\nexport const PATH = {\n  LOGIN: '/login',\n  REGISTRATION: '/registration',\n  PROFILE: '/profile',\n  PASSWORD_RECOVERY: '/password_recovery',\n  NEW_PASSWORD: '/new_password',\n  TESTING: '/testing',\n}\n\nfunction App() {\n  return (\n    <div className={'App'}>\n      <Switch>\n        <Route path={'/'} exact render={() => <Redirect to={PATH.TESTING}/>}/>\n        <Route path={PATH.LOGIN} render={() => <Login/>}/>\n        <Route path={PATH.REGISTRATION} render={() => <Registration/>}/>\n        <Route path={PATH.PROFILE} render={() => <Profile/>}/>\n        <Route path={PATH.PASSWORD_RECOVERY} render={() => <PasswordRecovery/>}/>\n        <Route path={PATH.NEW_PASSWORD} render={() => <NewPassword/>}/>\n        <Route path={PATH.TESTING} render={() => <Testing/>}/>\n        <Route render={() => <Error404/>}/>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","type StateType = {\r\n\r\n}\r\n\r\n// type ActionsType =\r\n\r\nconst initState: StateType = {\r\n\r\n}\r\n\r\nexport const reducer = (state: StateType = initState, action: any): StateType => {\r\n    switch (action.type) {\r\n        case '': {\r\n            return state\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\nexport const actionCreator = () => {}","import {combineReducers, createStore} from 'redux';\r\nimport {reducer} from './reducer';\r\n\r\nconst reducers = combineReducers({\r\n    reducer: reducer\r\n})\r\n\r\nconst store = createStore(reducers)\r\n\r\nexport default store\r\n\r\nexport type AppStoreType = ReturnType<typeof reducers>\r\n\r\n// @ts-ignore\r\nwindow.store = store // for dev","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {HashRouter} from 'react-router-dom';\nimport {Provider} from 'react-redux';\nimport store from './bll/store';\n\nReactDOM.render(\n    <HashRouter>\n        <React.StrictMode>\n          <Provider store={store}>\n            <App/>\n          </Provider>\n        </React.StrictMode>\n    </HashRouter>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}